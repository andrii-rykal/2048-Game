{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IAII,EAHA,EAAI,EACJ,EAAI,EACJ,EAAS,EAIP,EAAO,AADC,SAAS,aAAa,CAAC,SAClB,QAAQ,CAErB,EAAS,AADA,SAAS,aAAa,CAAC,gBAChB,aAAa,CAAC,UAC9B,EAAa,SAAS,aAAa,CAAC,eACpC,EAAQ,SAAS,gBAAgB,CAAC,eAyDxC,SAAS,EAAU,CAAI,EACrB,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAG,YACnB,CAoBA,SAAS,EAAQ,CAAM,CAAE,CAAM,EAAE,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAHxB,KAAK,MAAM,GAAK,GAAM,EAAI,CAIjC,CAAA,CAAI,CAAC,EAAO,CAAC,QAAQ,CAAC,EAAO,CAAC,SAAS,CAAG,EAC1C,CAAI,CAAC,EAAO,CAAC,QAAQ,CAAC,EAAO,CAAC,SAAS,CAAC,GAAG,CAAC,eAAqB,MAAA,CAAN,IAC3D,CAAI,CAAC,EAAO,CAAC,QAAQ,CAAC,EAAO,CAAC,SAAS,CAAC,MAAM,CAAE,eAAwB,MAAA,CAAV,EAAQ,GACxE,CAmBA,SAAS,EAAW,CAAM,EACxB,IAAM,EAAS,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAEtC,CAAA,IAAW,GAEb,EAAI,KAAK,KAAK,CAAC,AADf,CAAA,EAAS,CAAT,EAvHe,GAyHf,EAAI,EAAU,AAzHC,EAyHD,GAEd,EAAW,EAEf,CAQA,SAAS,EAAY,CAAW,EAC9B,IAAM,EAAc,SAAS,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar FIELD_SIZE = 4;\nvar AMOUNT_CELLS = FIELD_SIZE * FIELD_SIZE;\nvar x = 0;\nvar y = 0;\nvar number = 0;\nvar notMove;\nvar tbody = document.querySelector(\"tbody\");\nvar rows = tbody.children;\nvar header = document.querySelector(\".game-header\");\nvar button = header.querySelector(\"button\");\nvar scoreValue = document.querySelector(\".game-score\");\nvar cells = document.querySelectorAll(\".field-cell\");\nbutton.addEventListener(\"click\", start);\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowDown\":\n            down();\n            break;\n        case \"ArrowUp\":\n            up();\n            break;\n        case \"ArrowRight\":\n            right();\n            break;\n        case \"ArrowLeft\":\n            left();\n            break;\n    }\n    if (notMove) newCell();\n    var freeCell = some(rows, \"\");\n    if (!notMove && !freeCell) {\n        var count = 0;\n        for(var i = 0; i < FIELD_SIZE - 1; i++)for(var j = 0; j < FIELD_SIZE - 1; j++){\n            var currentCell = rows[i].children[j];\n            var downCell = rows[i + 1].children[j];\n            var nextCell = rows[i].children[j + 1];\n            if (currentCell.innerText === downCell.innerText || currentCell.innerText === nextCell.innerText) count++;\n        }\n        if (!count) showMessage(\"lose\");\n    }\n    var win = some(rows, \"2048\");\n    if (win) showMessage(\"win\");\n});\nfunction clearCell(cell) {\n    cell.innerText = \"\";\n    cell.className = \"field-cell\";\n}\nfunction start() {\n    reset();\n    startGame();\n    showMessage(\"nothing\");\n    startToRestart();\n}\nfunction reset() {\n    _to_consumable_array(cells).map(function(cell) {\n        clearCell(cell);\n    });\n    scoreValue.innerText = 0;\n}\nfunction startValue() {\n    return Math.random() > 0.1 ? 2 : 4;\n}\nfunction addCell(coordX, coordY) {\n    var value = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : startValue();\n    rows[coordY].children[coordX].innerText = value;\n    rows[coordY].children[coordX].classList.add(\"field-cell--\".concat(value));\n    rows[coordY].children[coordX].classList.remove(\"field-cell--\".concat(value / 2));\n}\nfunction newCell() {\n    randomCell(AMOUNT_CELLS);\n    if (rows[y].children[x].innerText === \"\") addCell(x, y);\n    else newCell();\n}\nfunction startGame() {\n    randomCell(AMOUNT_CELLS);\n    addCell(x, y);\n    randomCell(AMOUNT_CELLS);\n    addCell(x, y);\n}\nfunction randomCell(amount) {\n    var random = Math.floor(Math.random() * amount);\n    if (number !== random) {\n        number = random;\n        x = Math.floor(number / FIELD_SIZE);\n        y = number - x * FIELD_SIZE;\n    } else randomCell(amount);\n}\nfunction startToRestart() {\n    button.classList.remove(\"start\");\n    button.classList.add(\"restart\");\n    button.innerText = \"Restart\";\n}\nfunction showMessage(typeMessage) {\n    var loseMessage = document.querySelector(\".message-lose\");\n    var winMessage = document.querySelector(\".message-win\");\n    var startMessage = document.querySelector(\".message-start\");\n    switch(typeMessage){\n        case \"lose\":\n            winMessage.classList.add(\"hidden\");\n            startMessage.classList.add(\"hidden\");\n            loseMessage.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            loseMessage.classList.add(\"hidden\");\n            startMessage.classList.add(\"hidden\");\n            winMessage.classList.remove(\"hidden\");\n            break;\n        case \"nothing\":\n            loseMessage.classList.add(\"hidden\");\n            winMessage.classList.add(\"hidden\");\n            startMessage.classList.add(\"hidden\");\n            break;\n    }\n}\nfunction down() {\n    notMove = false;\n    for(var i = 0; i < FIELD_SIZE; i++){\n        moveDown(i);\n        for(var j = FIELD_SIZE - 1; j > 0; j--){\n            var currentCell = rows[j].children[i];\n            var beforeCell = rows[j - 1].children[i];\n            if (currentCell.innerText === \"\" || beforeCell.innerText === \"\") continue;\n            if (currentCell.innerText === beforeCell.innerText) {\n                var sum = +currentCell.innerText * 2;\n                addCell(i, j, sum);\n                scoreValue.innerText = +scoreValue.innerText + sum;\n                clearCell(beforeCell);\n                notMove = true;\n            }\n        }\n        moveDown(i);\n    }\n}\nfunction moveDown(index) {\n    var count = 0;\n    for(var j = FIELD_SIZE - 1; j >= 0; j--){\n        var currentCell = rows[j].children[index];\n        if (currentCell.innerText === \"\") {\n            count++;\n            continue;\n        }\n        if (j !== FIELD_SIZE - 1 && count > 0) {\n            addCell(index, j + count, currentCell.innerText);\n            clearCell(currentCell);\n            count--;\n            j++;\n            notMove = true;\n        }\n    }\n}\nfunction up() {\n    notMove = false;\n    for(var i = 0; i < FIELD_SIZE; i++){\n        moveUp(i);\n        for(var j = 0; j < FIELD_SIZE - 1; j++){\n            var currentCell = rows[j].children[i];\n            var nextCell = rows[j + 1].children[i];\n            if (currentCell.innerText === \"\" || nextCell.innerText === \"\") continue;\n            if (currentCell.innerText === nextCell.innerText) {\n                var sum = +currentCell.innerText * 2;\n                addCell(i, j, sum);\n                scoreValue.innerText = +scoreValue.innerText + sum;\n                clearCell(nextCell);\n                notMove = true;\n            }\n        }\n        moveUp(i);\n    }\n}\nfunction moveUp(index) {\n    var count = 0;\n    for(var j = 0; j < FIELD_SIZE; j++){\n        var currentCell = rows[j].children[index];\n        if (currentCell.innerText === \"\") {\n            count++;\n            continue;\n        }\n        if (j !== 0 && count > 0) {\n            addCell(index, j - count, currentCell.innerText);\n            clearCell(currentCell);\n            count--;\n            j--;\n            notMove = true;\n        }\n    }\n}\nfunction right() {\n    notMove = false;\n    for(var i = 0; i < FIELD_SIZE; i++){\n        moveRight(i);\n        for(var j = FIELD_SIZE - 1; j > 0; j--){\n            var currentCell = rows[i].children[j];\n            var beforeCell = rows[i].children[j - 1];\n            if (currentCell.innerText === \"\" || beforeCell.innerText === \"\") continue;\n            if (currentCell.innerText === beforeCell.innerText) {\n                var sum = +currentCell.innerText * 2;\n                addCell(j, i, sum);\n                scoreValue.innerText = +scoreValue.innerText + sum;\n                clearCell(beforeCell);\n                notMove = true;\n            }\n        }\n        moveRight(i);\n    }\n}\nfunction moveRight(index) {\n    var count = 0;\n    for(var j = FIELD_SIZE - 1; j >= 0; j--){\n        var currentCell = rows[index].children[j];\n        if (currentCell.innerText === \"\") {\n            count++;\n            continue;\n        }\n        if (j !== FIELD_SIZE - 1 && count > 0) {\n            addCell(j + count, index, currentCell.innerText);\n            clearCell(currentCell);\n            count--;\n            j++;\n            notMove = true;\n        }\n    }\n}\nfunction left() {\n    notMove = false;\n    for(var i = 0; i < FIELD_SIZE; i++){\n        moveLeft(i);\n        for(var j = 0; j < FIELD_SIZE - 1; j++){\n            var currentCell = rows[i].children[j];\n            var nextCell = rows[i].children[j + 1];\n            if (currentCell.innerText === \"\" || nextCell.innerText === \"\") continue;\n            if (currentCell.innerText === nextCell.innerText) {\n                var sum = +currentCell.innerText * 2;\n                addCell(j, i, sum);\n                scoreValue.innerText = +scoreValue.innerText + sum;\n                clearCell(nextCell);\n                notMove = true;\n            }\n        }\n        moveLeft(i);\n    }\n}\nfunction moveLeft(index) {\n    var count = 0;\n    for(var j = 0; j < FIELD_SIZE; j++){\n        var currentCell = rows[index].children[j];\n        if (currentCell.innerText === \"\") {\n            count++;\n            continue;\n        }\n        if (j !== 0 && count > 0) {\n            addCell(j - count, index, currentCell.innerText);\n            clearCell(currentCell);\n            count--;\n            j--;\n            notMove = true;\n        }\n    }\n}\nfunction some(collection, value) {\n    return _to_consumable_array(collection).some(function(row) {\n        return _to_consumable_array(row.children).some(function(cell) {\n            return cell.innerText === value;\n        });\n    });\n}\n\n//# sourceMappingURL=index.4885d65c.js.map\n","'use strict';\n\nconst FIELD_SIZE = 4;\nconst AMOUNT_CELLS = FIELD_SIZE * FIELD_SIZE;\nlet x = 0;\nlet y = 0;\nlet number = 0;\nlet notMove;\n\nconst tbody = document.querySelector('tbody');\nconst rows = tbody.children;\nconst header = document.querySelector('.game-header');\nconst button = header.querySelector('button');\nconst scoreValue = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\n\nbutton.addEventListener('click', start);\n\ndocument.addEventListener('keydown', e => {\n  switch (e.key) {\n    case 'ArrowDown':\n      down();\n      break;\n\n    case 'ArrowUp':\n      up();\n      break;\n\n    case 'ArrowRight':\n      right();\n      break;\n\n    case 'ArrowLeft':\n      left();\n      break;\n  }\n\n  if (notMove) {\n    newCell();\n  }\n\n  const freeCell = some(rows, '');\n\n  if (!notMove && !freeCell) {\n    let count = 0;\n\n    for (let i = 0; i < FIELD_SIZE - 1; i++) {\n      for (let j = 0; j < FIELD_SIZE - 1; j++) {\n        const currentCell = rows[i].children[j];\n        const downCell = rows[i + 1].children[j];\n        const nextCell = rows[i].children[j + 1];\n\n        if (currentCell.innerText === downCell.innerText\n          || currentCell.innerText === nextCell.innerText) {\n          count++;\n        }\n      }\n    }\n\n    if (!count) {\n      showMessage('lose');\n    }\n  }\n\n  const win = some(rows, '2048');\n\n  if (win) {\n    showMessage('win');\n  }\n});\n\nfunction clearCell(cell) {\n  cell.innerText = '';\n  cell.className = 'field-cell';\n}\n\nfunction start() {\n  reset();\n  startGame();\n  showMessage('nothing');\n  startToRestart();\n}\n\nfunction reset() {\n  [...cells].map(cell => {\n    clearCell(cell);\n  });\n  scoreValue.innerText = 0;\n}\n\nfunction startValue() {\n  return Math.random() > 0.1 ? 2 : 4;\n}\n\nfunction addCell(coordX, coordY, value = startValue()) {\n  rows[coordY].children[coordX].innerText = value;\n  rows[coordY].children[coordX].classList.add(`field-cell--${value}`);\n  rows[coordY].children[coordX].classList.remove(`field-cell--${value / 2}`);\n}\n\nfunction newCell() {\n  randomCell(AMOUNT_CELLS);\n\n  if (rows[y].children[x].innerText === '') {\n    addCell(x, y);\n  } else {\n    newCell();\n  }\n}\n\nfunction startGame() {\n  randomCell(AMOUNT_CELLS);\n  addCell(x, y);\n  randomCell(AMOUNT_CELLS);\n  addCell(x, y);\n}\n\nfunction randomCell(amount) {\n  const random = Math.floor(Math.random() * amount);\n\n  if (number !== random) {\n    number = random;\n    x = Math.floor(number / FIELD_SIZE);\n    y = number - (x * FIELD_SIZE);\n  } else {\n    randomCell(amount);\n  }\n}\n\nfunction startToRestart() {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.innerText = 'Restart';\n}\n\nfunction showMessage(typeMessage) {\n  const loseMessage = document.querySelector('.message-lose');\n  const winMessage = document.querySelector('.message-win');\n  const startMessage = document.querySelector('.message-start');\n\n  switch (typeMessage) {\n    case 'lose':\n      winMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      loseMessage.classList.remove('hidden');\n      break;\n\n    case 'win':\n      loseMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      winMessage.classList.remove('hidden');\n      break;\n\n    case 'nothing':\n      loseMessage.classList.add('hidden');\n      winMessage.classList.add('hidden');\n      startMessage.classList.add('hidden');\n      break;\n  }\n}\n\nfunction down() {\n  notMove = false;\n\n  for (let i = 0; i < FIELD_SIZE; i++) {\n    moveDown(i);\n\n    for (let j = FIELD_SIZE - 1; j > 0; j--) {\n      const currentCell = rows[j].children[i];\n      const beforeCell = rows[j - 1].children[i];\n\n      if (currentCell.innerText === '' || beforeCell.innerText === '') {\n        continue;\n      }\n\n      if (currentCell.innerText === beforeCell.innerText) {\n        const sum = +currentCell.innerText * 2;\n\n        addCell(i, j, sum);\n        scoreValue.innerText = +scoreValue.innerText + sum;\n        clearCell(beforeCell);\n        notMove = true;\n      }\n    }\n    moveDown(i);\n  }\n}\n\nfunction moveDown(index) {\n  let count = 0;\n\n  for (let j = FIELD_SIZE - 1; j >= 0; j--) {\n    const currentCell = rows[j].children[index];\n\n    if (currentCell.innerText === '') {\n      count++;\n      continue;\n    }\n\n    if (j !== FIELD_SIZE - 1 && count > 0) {\n      addCell(index, j + count, currentCell.innerText);\n      clearCell(currentCell);\n      count--;\n      j++;\n      notMove = true;\n    }\n  }\n}\n\nfunction up() {\n  notMove = false;\n\n  for (let i = 0; i < FIELD_SIZE; i++) {\n    moveUp(i);\n\n    for (let j = 0; j < FIELD_SIZE - 1; j++) {\n      const currentCell = rows[j].children[i];\n      const nextCell = rows[j + 1].children[i];\n\n      if (currentCell.innerText === '' || nextCell.innerText === '') {\n        continue;\n      }\n\n      if (currentCell.innerText === nextCell.innerText) {\n        const sum = +currentCell.innerText * 2;\n\n        addCell(i, j, sum);\n        scoreValue.innerText = +scoreValue.innerText + sum;\n        clearCell(nextCell);\n        notMove = true;\n      }\n    }\n    moveUp(i);\n  }\n}\n\nfunction moveUp(index) {\n  let count = 0;\n\n  for (let j = 0; j < FIELD_SIZE; j++) {\n    const currentCell = rows[j].children[index];\n\n    if (currentCell.innerText === '') {\n      count++;\n      continue;\n    }\n\n    if (j !== 0 && count > 0) {\n      addCell(index, j - count, currentCell.innerText);\n      clearCell(currentCell);\n      count--;\n      j--;\n      notMove = true;\n    }\n  }\n}\n\nfunction right() {\n  notMove = false;\n\n  for (let i = 0; i < FIELD_SIZE; i++) {\n    moveRight(i);\n\n    for (let j = FIELD_SIZE - 1; j > 0; j--) {\n      const currentCell = rows[i].children[j];\n      const beforeCell = rows[i].children[j - 1];\n\n      if (currentCell.innerText === '' || beforeCell.innerText === '') {\n        continue;\n      }\n\n      if (currentCell.innerText === beforeCell.innerText) {\n        const sum = +currentCell.innerText * 2;\n\n        addCell(j, i, sum);\n        scoreValue.innerText = +scoreValue.innerText + sum;\n        clearCell(beforeCell);\n        notMove = true;\n      }\n    }\n    moveRight(i);\n  }\n}\n\nfunction moveRight(index) {\n  let count = 0;\n\n  for (let j = FIELD_SIZE - 1; j >= 0; j--) {\n    const currentCell = rows[index].children[j];\n\n    if (currentCell.innerText === '') {\n      count++;\n      continue;\n    }\n\n    if (j !== FIELD_SIZE - 1 && count > 0) {\n      addCell(j + count, index, currentCell.innerText);\n      clearCell(currentCell);\n      count--;\n      j++;\n      notMove = true;\n    }\n  }\n}\n\nfunction left() {\n  notMove = false;\n\n  for (let i = 0; i < FIELD_SIZE; i++) {\n    moveLeft(i);\n\n    for (let j = 0; j < FIELD_SIZE - 1; j++) {\n      const currentCell = rows[i].children[j];\n      const nextCell = rows[i].children[j + 1];\n\n      if (currentCell.innerText === '' || nextCell.innerText === '') {\n        continue;\n      }\n\n      if (currentCell.innerText === nextCell.innerText) {\n        const sum = +currentCell.innerText * 2;\n\n        addCell(j, i, sum);\n        scoreValue.innerText = +scoreValue.innerText + sum;\n        clearCell(nextCell);\n        notMove = true;\n      }\n    }\n    moveLeft(i);\n  }\n}\n\nfunction moveLeft(index) {\n  let count = 0;\n\n  for (let j = 0; j < FIELD_SIZE; j++) {\n    const currentCell = rows[index].children[j];\n\n    if (currentCell.innerText === '') {\n      count++;\n      continue;\n    }\n\n    if (j !== 0 && count > 0) {\n      addCell(j - count, index, currentCell.innerText);\n      clearCell(currentCell);\n      count--;\n      j--;\n      notMove = true;\n    }\n  }\n}\n\nfunction some(collection, value) {\n  return [...collection].some(row => [...row.children]\n    .some(cell => cell.innerText === value));\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","notMove","x","y","number","rows","tbody","document","querySelector","children","button","header","scoreValue","cells","querySelectorAll","clearCell","cell","innerText","className","addCell","coordX","coordY","value","arguments","Math","random","classList","add","concat","remove","randomCell","amount","floor","showMessage","typeMessage","loseMessage","winMessage","startMessage","moveDown","index","count","j","FIELD_SIZE","currentCell","moveUp","moveRight","moveLeft","some","collection","row","addEventListener","map","e","key","down","beforeCell","sum","up","nextCell","right","left","newCell","freeCell","downCell"],"version":3,"file":"index.4885d65c.js.map"}